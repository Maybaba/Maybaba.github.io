{"version":3,"file":"static/js/455.1a4f488a.chunk.js","mappings":"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","sources":["webpack://foodietree_FE/./src/pages/customer/CustomerReservationFilterModal.module.scss?cf52","pages/customer/CustomerReservationFilterModal.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"CustomerReservationFilterModal_modalContent__bk8-J\",\"filterGroup\":\"CustomerReservationFilterModal_filterGroup__V87R3\",\"options\":\"CustomerReservationFilterModal_options__k62pd\",\"option\":\"CustomerReservationFilterModal_option__wiM8b\",\"selected\":\"CustomerReservationFilterModal_selected__F3c7H\",\"dateRange\":\"CustomerReservationFilterModal_dateRange__YbbBw\",\"buttons\":\"CustomerReservationFilterModal_buttons__X+LWE\",\"resetButton\":\"CustomerReservationFilterModal_resetButton__CN47v\",\"resetIcon\":\"CustomerReservationFilterModal_resetIcon__i9JCW\",\"resetText\":\"CustomerReservationFilterModal_resetText__TW0wq\",\"applyButton\":\"CustomerReservationFilterModal_applyButton__c+itD\"};","import React, { useState, useEffect } from 'react';\nimport styles from './CustomerReservationFilterModal.module.scss';\nimport { useModal } from \"../common/ModalProvider\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRotateRight } from \"@fortawesome/free-solid-svg-icons\";\n\nconst CustomerReservationFilterModal = ({ onApply, initialFilters }) => {\n    const { closeModal } = useModal();\n    const [categories, setCategories] = useState([]);\n    const [category, setCategory] = useState(initialFilters?.category || []);\n    const [startDate, setStartDate] = useState(initialFilters?.dateRange?.startDate || '');\n    const [endDate, setEndDate] = useState(initialFilters?.dateRange?.endDate || '');\n    const [status, setStatus] = useState(initialFilters?.status || []);\n\n    // 카테고리 데이터를 가져오는 비동기 함수\n    const fetchCategories = async () => {\n        try {\n            const response = await fetch('/categories');\n            const data = await response.json();\n            setCategories(data); // 카테고리 목록 상태 업데이트\n        } catch (error) {\n            console.error('Failed to fetch categories:', error);\n        }\n    };\n\n    // 컴포넌트가 마운트될 때 카테고리를 가져오는 함수 호출\n    useEffect(() => {\n        fetchCategories();\n    }, []);\n\n    // 카테고리 클릭 시 호출되는 함수\n    const handleCategoryClick = (englishName) => {\n        setCategory((prev) => {\n            // 이미 선택된 카테고리라면 배열에서 제거, 그렇지 않으면 추가\n            if (prev.includes(englishName)) {\n                return prev.filter((item) => item !== englishName);\n            } else {\n                return [...prev, englishName];\n            }\n        });\n    };\n\n    // 주문 상태 클릭 시 호출되는 함수\n    const handleStatusClick = (value) => {\n        setStatus((prev) =>\n            prev.includes(value) ? prev.filter((item) => item !== value) : [...prev, value]\n        );\n    };\n\n    const getStatusDisplayName = (status) => {\n        switch (status) {\n            case 'RESERVED':\n                return '진행 중';\n            case 'PICKEDUP':\n                return '픽업 완료';\n            case 'CANCELED':\n                return '취소';\n            case 'NOSHOW':\n                return '노쇼';\n            default:\n                return status;\n        }\n    };\n\n    // 시작 날짜 변경 시 호출되는 함수\n    const handleStartDateChange = (e) => {\n        const selectedStartDate = e.target.value;\n        if (endDate && new Date(selectedStartDate) > new Date(endDate)) {\n            alert(\"시작 날짜는 종료 날짜 이후 일 수 없습니다.\");\n        } else {\n            setStartDate(selectedStartDate);\n        }\n    };\n\n    // 종료 날짜 변경 시 호출되는 함수\n    const handleEndDateChange = (e) => {\n        const selectedEndDate = e.target.value;\n        if (startDate && new Date(selectedEndDate) < new Date(startDate)) {\n            alert(\"종료 날짜는 시작 날짜 이전 일 수 없습니다.\");\n        } else {\n            setEndDate(selectedEndDate);\n        }\n    };\n\n    // 필터 적용 버튼 클릭 시 호출되는 함수\n    const handleApply = () => {\n        onApply({ category, dateRange: { startDate, endDate }, status });\n        closeModal();\n    };\n\n    // 필터 초기화 함수\n    const handleReset = () => {\n        setCategory([]);\n        setStartDate('');\n        setEndDate('');\n        setStatus([]);\n    };\n\n    return (\n        <div className={styles.modalContent}>\n            {/*<div className={styles.header}>*/}\n            {/*    <h2>필터</h2>*/}\n            {/*</div>*/}\n            <div className={styles.filterGroup}>\n                <label>메뉴 종류(카테고리)</label>\n                <div className={styles.options}>\n                    {categories.map(item => (\n                        <div\n                            key={item.englishName}\n                            className={`${styles.option} ${category.includes(item.englishName) ? styles.selected : ''}`}\n                            onClick={() => handleCategoryClick(item.englishName)} // 필터링 영어\n                        >\n                            {item.foodType} {/* 표기는 한글 */}\n                        </div>\n                    ))}\n                </div>\n            </div>\n            <div className={styles.filterGroup}>\n                <label>조회 기간</label>\n                <div className={styles.dateRange}>\n                    <input\n                        type=\"date\"\n                        value={startDate}\n                        onChange={handleStartDateChange}\n                    />\n                    <span>~</span>\n                    <input\n                        type=\"date\"\n                        value={endDate}\n                        onChange={handleEndDateChange}\n                    />\n                </div>\n            </div>\n            <div className={styles.filterGroup}>\n                <label>주문 상태</label>\n                <div className={styles.options}>\n                    {['RESERVED', 'PICKEDUP', 'CANCELED', 'NOSHOW'].map(item => (\n                        <div\n                            key={item}\n                            className={`${styles.option} ${status.includes(item) ? styles.selected : ''}`}\n                            onClick={() => handleStatusClick(item)}\n                        >\n                            {getStatusDisplayName(item)}\n                        </div>\n                    ))}\n                </div>\n            </div>\n            <div className={styles.buttons}>\n                <div className={styles.resetButton} onClick={handleReset}>\n                    <FontAwesomeIcon icon={faRotateRight} className={styles.resetIcon} />\n                    <div className={styles.resetText}>초기화</div>\n                </div>\n                <button className={styles.applyButton} onClick={handleApply}>필터 적용하기</button>\n            </div>\n        </div>\n    );\n};\n\nexport default CustomerReservationFilterModal;\n"],"names":["_ref","_initialFilters$dateR","_initialFilters$dateR2","onApply","initialFilters","closeModal","useModal","categories","setCategories","useState","category","setCategory","startDate","setStartDate","dateRange","endDate","setEndDate","status","setStatus","useEffect","async","response","fetch","data","json","error","console","fetchCategories","getStatusDisplayName","_jsxs","className","styles","children","_jsx","map","item","concat","includes","englishName","onClick","handleCategoryClick","prev","filter","foodType","type","value","onChange","e","selectedStartDate","target","Date","alert","selectedEndDate","handleStatusClick","handleReset","FontAwesomeIcon","icon","faRotateRight","handleApply"],"sourceRoot":""}